{"version":3,"sources":["types.js","reminders-icon.png","app.jsx","actionsCreatiors.js","reducers/rootReducer.js","index.js"],"names":["ADD_REMINDER","DELETE_REMINDER","CLEAR_REMINDERS","App","state","whatToDo","timeToDo","renderReminder","props","reminders","map","reminder","index","Container","className","Row","Col","xs","md","moment","Date","fromNow","xmlns","viewBox","fill","onClick","deleteReminder","width","height","fillRule","d","clipRule","src","LogoImg","alt","Form","Group","controlId","Control","type","placeholder","onChange","e","setState","target","value","this","placeholderText","selected","showTimeSelect","timeFormat","dateFormat","Button","variant","size","block","addReminder","clearReminder","Component","connect","action","read_cookie","bake_cookie","filter","store","createStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.59fb0de6.chunk.js","sourcesContent":["export const ADD_REMINDER = \"ADD_REMINDER\";\r\nexport const DELETE_REMINDER = \"DELETE_REMINDER\";\r\nexport const CLEAR_REMINDERS = \"CLEAR_REMINDERS\";\r\n","export default __webpack_public_path__ + \"static/media/reminders-icon.1c7af7b0.png\";","import React, { Component } from \"react\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport { Button, Col, Container, Form, Row } from \"react-bootstrap\";\r\nimport { addReminder, deleteReminder, clearReminder } from \"./actionsCreatiors\";\r\nimport { connect } from \"react-redux\";\r\nimport moment from \"moment\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport LogoImg from \"./reminders-icon.png\";\r\nimport \"./app.css\";\r\n\r\nclass App extends Component {\r\n  state = {\r\n    whatToDo: \"\",\r\n    timeToDo: \"\",\r\n  };\r\n\r\n  renderReminder = () => {\r\n    let { reminders } = this.props;\r\n    return reminders.map((reminder, index) => {\r\n      return (\r\n        <Container\r\n          className=\"reminder-note text-dark text-left p-2 my-3 rounded overflow-hidden\"\r\n          key={index}\r\n        >\r\n          <Row>\r\n            <Col xs={10} md={10} className=\"info float-left\">\r\n              <h4 className=\"what-to-do\">{reminder.whatToDo}</h4>\r\n              <p className=\"time-to-do\">\r\n                {moment(new Date(reminder.timeToDo)).fromNow()}\r\n              </p>\r\n            </Col>\r\n            <Col xs={2} md={2} className=\"delete float-left text-center\">\r\n              <svg\r\n                xmlns=\"http://www.w3.org/2000/svg\"\r\n                viewBox=\"0 0 20 20\"\r\n                fill=\"currentColor\"\r\n                onClick={() => {\r\n                  this.props.deleteReminder(index);\r\n                }}\r\n                width=\"60\"\r\n                height=\"70\"\r\n              >\r\n                <path\r\n                  fillRule=\"evenodd\"\r\n                  d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z\"\r\n                  clipRule=\"evenodd\"\r\n                />\r\n              </svg>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      );\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <section className=\"reminder rounded px-3 py-3 text-center text-white\">\r\n        <img src={LogoImg} alt=\"logo-reminder\" />\r\n        <h2>What Shoud You Do?</h2>\r\n        <Form.Group controlId=\"forTitle\">\r\n          <Form.Control\r\n            type=\"text\"\r\n            placeholder=\"Type What are you planning to do?\"\r\n            onChange={(e) => {\r\n              this.setState({\r\n                whatToDo: e.target.value,\r\n              });\r\n            }}\r\n            value={this.state.whatToDo}\r\n          />\r\n        </Form.Group>\r\n        <Form.Group controlId=\"fordate\">\r\n          <DatePicker\r\n            className=\"for-time\"\r\n            placeholderText=\"Enter Date\"\r\n            selected={this.state.timeToDo}\r\n            onChange={(timeToDo) => {\r\n              this.setState({\r\n                timeToDo: timeToDo,\r\n              });\r\n            }}\r\n            showTimeSelect\r\n            timeFormat=\"p\"\r\n            dateFormat=\"Pp\"\r\n            value={this.state.timeToDo}\r\n          />\r\n          {/* <Form.Control\r\n            type=\"datetime-local\"\r\n            onChange={(e) => {\r\n              this.setState({\r\n                timeToDo: e.target.value,\r\n              });\r\n            }}\r\n            value={this.state.timeToDo}\r\n          /> */}\r\n        </Form.Group>\r\n\r\n        <Button\r\n          className=\"my-2\"\r\n          variant=\"primary\"\r\n          size=\"lg\"\r\n          block\r\n          onClick={() => {\r\n            this.props.addReminder(this.state.whatToDo, this.state.timeToDo);\r\n            this.setState({\r\n              whatToDo: \"\",\r\n              timeToDo: \"\",\r\n            });\r\n          }}\r\n        >\r\n          Add Reminder\r\n        </Button>\r\n        <div className=\"reminders\">{this.renderReminder()}</div>\r\n        <Button\r\n          variant=\"danger\"\r\n          size=\"lg\"\r\n          block\r\n          onClick={() => {\r\n            this.props.clearReminder();\r\n          }}\r\n        >\r\n          Clear Reminders\r\n        </Button>\r\n      </section>\r\n    );\r\n  }\r\n}\r\n\r\n// function mapDispatchToProps(dispatch) {\r\n//   return {\r\n//     addReminder: () => dispatch(addReminder()),\r\n//     deleteReminder: () => dispatch(deleteReminder()),\r\n//   };\r\n// }\r\n\r\n// function mapStateToProps(state) {\r\n//   return {\r\n//     reminders: state,\r\n//   };\r\n// }\r\n\r\nexport default connect(\r\n  (state) => {\r\n    return {\r\n      reminders: state,\r\n    };\r\n  },\r\n  { addReminder, deleteReminder, clearReminder }\r\n)(App);\r\n","import { ADD_REMINDER, CLEAR_REMINDERS, DELETE_REMINDER } from \"./types\";\r\n\r\nexport const addReminder = (whatToDo, timeToDo) => {\r\n  const action = {\r\n    type: ADD_REMINDER,\r\n    whatToDo,\r\n    timeToDo,\r\n  };\r\n  return action;\r\n};\r\n\r\nexport const deleteReminder = (index) => {\r\n  const action = {\r\n    type: DELETE_REMINDER,\r\n    index,\r\n  };\r\n\r\n  return action;\r\n};\r\n\r\nexport const clearReminder = () => {\r\n  const action = {\r\n    type: CLEAR_REMINDERS,\r\n  };\r\n  return action;\r\n};\r\n","import { ADD_REMINDER, CLEAR_REMINDERS, DELETE_REMINDER } from \"../types\";\r\nimport { bake_cookie, read_cookie } from \"sfcookies\";\r\n\r\nlet reminder = (state = [], action) => {\r\n  let reminders = null;\r\n  state = read_cookie(\"reminders\");\r\n  if (action.type === ADD_REMINDER) {\r\n    reminders = [\r\n      ...state,\r\n      {\r\n        whatToDo: action.whatToDo,\r\n        timeToDo: action.timeToDo,\r\n      },\r\n    ];\r\n    bake_cookie(\"reminders\", reminders);\r\n    return reminders;\r\n  } else if (action.type === DELETE_REMINDER) {\r\n    reminders = state.filter((reminder, index) => index !== action.index);\r\n    bake_cookie(\"reminders\", reminders);\r\n    return reminders;\r\n  } else if (action.type === CLEAR_REMINDERS) {\r\n    reminders = [];\r\n    bake_cookie(\"reminders\", reminders);\r\n    return reminders;\r\n  } else {\r\n    return state;\r\n  }\r\n};\r\n\r\nexport default reminder;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { createStore } from \"redux\";\r\nimport { Provider } from \"react-redux\";\r\nimport App from \"./app\";\r\nimport reminder from \"./reducers/rootReducer\";\r\n\r\nconst store = createStore(reminder);\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}